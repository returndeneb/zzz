import json
import logging
from datetime import datetime
import boto3
import requests
from user_agent import generate_user_agent

logger = logging.getLogger()
logger.setLevel(logging.INFO)

dynamodb = boto3.client('dynamodb')

def get_follows(NID_AUT: str, NID_SES: str) -> list:
    page = 0
    total_page = 1
    follows = []

    while page < total_page:
        res = requests.get(
            "https://api.chzzk.naver.com/service/v1/channels/followings",
            params={
                "page": page,
                "size": 505,
                "sortType": "FOLLOW",
                "subscription": False,
                "followerCount": False
            },
            headers={
                "User-Agent": generate_user_agent(os="win", device_type="desktop"),
                "Cookie": f"NID_AUT={NID_AUT}; NID_SES={NID_SES}"
            }
        )
        data = res.json()
        total_page = data.get("content", {}).get("totalPage", 0)
        page += 1
        follows.extend(data.get("content", {}).get("followingList", []))

    return follows

def check_live_status(chzzk_id: str) -> bool:
    try:
        chzzk = get_chzzk(chzzk_id, logger=logger)
        if chzzk and chzzk['status'] == "LIVE":
            return True
    except Exception as e:
        logger.error(f"Error fetching live status for {chzzk_id}: {str(e)}")
    return False

def handler(event, context):
    index = int(event.get("resources", [])[0][-1])
    request_id = context.aws_request_id

    res = dynamodb.get_item(
        Key={
            "PK": f"NAVER#{index}",
            "SK": f"NAVER#{index}"
        }
    )
    naver = res.get("Item")
    NID_AUT = naver.get("NID_AUT")
    NID_SES = naver.get("NID_SES")

    follows = get_follows(NID_AUT, NID_SES)
    live_channels = [
        f["channel"]["channelId"]
        for f in follows if f["streamer"]["openLive"] == True
    ]

    for chzzk_id in live_channels:
        if check_live_status(chzzk_id):
            return {
                "statusCode": 200,
                "body": json.dumps({"broadcast_live": True})
            }

    return {
        "statusCode": 200,
        "body": json.dumps({"broadcast_live": False})
    }




def get_chzzk(channel_id: str, logger: logging.Logger | None = None, retry: int = 2) -> ChzzkLive | None:
    """채널 ID를 통해 치지직 채널 정보를 가져옵니다.
    만약 채널이 존재하지 않는다면 None을 반환합니다.
    """
    # 정규화되지 않은 채널 ID
    if "/" in channel_id:
        if logger:
            logger.error(
                json.dumps(
                    {
                        "type": "INVALID_CHZZK_CHANNEL_ID",
                        "channel_id": channel_id
                    }
                )
            )
        return None

    # retry
    for retry in range(1, retry + 1):
        try:
            res = requests.get(
                f"https://api.chzzk.naver.com/service/v2/channels/{channel_id}/live-detail",
                headers={
                    "User-Agent": generate_user_agent(os="win", device_type="desktop"),
                },
                timeout=1
            )
            break
        except requests.exceptions.Timeout as e:
            if logger:
                logger.error(
                    json.dumps(
                        {
                            "type": "CHZZK_REQUEST_TIMEOUT",
                            "channel_id": channel_id,
                            "exception": str(e),
                            "retry": retry
                        }
                    )
                )
        except Exception as e:
            if logger:
                logger.error(
                    json.dumps(
                        {
                            "type": "CHZZK_REQUEST_ERROR",
                            "channel_id": channel_id,
                            "exception": str(e),
                            "retry": retry
                        }
                    )
                )
            continue
    else:
        # Break 없이 끝났을 때 -> retry 모두 실패
        if logger:
            logger.error(
                json.dumps(
                    {
                        "type": "CHZZK_REQUEST_FAILED",
                        "channel_id": channel_id
                    }
                )
            )
        return None

    # 채널이 존재하지 않는 경우 or 알 수 없는 오류
    if res.status_code != 200:
        if logger:
            logger.error(
                json.dumps(
                    {
                        "type": "CHZZK_INVALID_RESPONSE",
                        "channel_id": channel_id,
                        "status_code": res.status_code,
                        "response": res.text
                    }
                )
            )
        return None

    content = res.json()["content"]

    # 한번도 방송을 키지 않은 경우
    if content is None:
        return None

    return content